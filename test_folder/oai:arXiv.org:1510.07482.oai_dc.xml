<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.openarchives.org/OAI/2.0/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
 <dc:title>Edge-Linear First-Order Dependency Parsing with Undirected Minimum
  Spanning Tree Inference</dc:title>
 <dc:creator>Levi, Effi</dc:creator>
 <dc:creator>Reichart, Roi</dc:creator>
 <dc:creator>Rappoport, Ari</dc:creator>
 <dc:subject>Computer Science - Computation and Language</dc:subject>
 <dc:description>  The run time complexity of state-of-the-art inference algorithms in
graph-based dependency parsing is super-linear in the number of input words
(n). Recently, pruning algorithms for these models have shown to cut a large
portion of the graph edges, with minimal damage to the resulting parse trees.
Solving the inference problem in run time complexity determined solely by the
number of edges (m) is hence of obvious importance.
  We propose such an inference algorithm for first-order models, which encodes
the problem as a minimum spanning tree (MST) problem in an undirected graph.
This allows us to utilize state-of-the-art undirected MST algorithms whose run
time is O(m) at expectation and with a very high probability. A directed parse
tree is then inferred from the undirected MST and is subsequently improved with
respect to the directed parsing model through local greedy updates, both steps
running in O(n) time. In experiments with 18 languages, a variant of the
first-order MSTParser (McDonald et al., 2005b) that employs our algorithm
performs very similarly to the original parser that runs an O(n^2) directed MST
inference.
</dc:description>
 <dc:description>Comment: Accepted to ACL 2016, camera ready version</dc:description>
 <dc:date>2015-10-26</dc:date>
 <dc:date>2016-06-07</dc:date>
 <dc:type>text</dc:type>
 <dc:identifier>http://arxiv.org/abs/1510.07482</dc:identifier>
 </oai_dc:dc>

